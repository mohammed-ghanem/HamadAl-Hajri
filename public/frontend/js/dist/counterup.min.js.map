{"version":3,"sources":["counterup.js"],"names":["$","fn","counterUp","options","settings","extend","time","delay","this","each","$this","counterUpper","waypoint","$settings","num","text","isComma","test","replace","isFloat","decimalPlaces","split","length","i","divisions","newNum","parseInt","parseFloat","toString","toFixed","nums","unshift","data","shift","setTimeout","offset","triggerOnce","jQuery"],"mappings":"cACA,SAAWA,GAGPA,EAAEC,GAAGC,UAAY,SAAUC,GAGzB,IAAIC,EAAaC,EAAAA,OAAO,CACpBC,KADoB,IAEpBC,MAAS,IACVJ,GAIC,OAAAK,KAAAC,KAAA,WACA,IAAIC,EAAQV,EAAEQ,MAGVG,EAAeP,EAdzBM,EAAAE,SAgB0BC,WACZC,IAAMJ,EAAMK,GACZC,EAAUH,EAAgBI,KAA9BJ,EAAAN,MACUW,EAAAA,EAAJH,OACGC,EAAG,gBAAZC,KAAAH,GACIK,EAAOL,EAAGI,QAAA,KAAA,IACG,WAAUD,KAAOH,GAGlC,IAHIM,IADAD,EAAU,mBAAmBF,KAAKH,GAI5BM,EAAeD,GAAYL,EAAAO,MAAA,KAAA,IAAA,IAAAC,OAAA,EAA5BC,EAAIC,EAAgB,GAALD,EAAQA,IAAK,CAUjC,IAAAE,EAAAC,SAAAZ,EAAAU,EAAAD,GACA,GAAAJ,IACWM,EAAAE,WAAoBF,EAAOG,EAAaL,GAAAM,QAAAT,IAD/CJ,EAMJ,KAAA,eAAAC,KAAAQ,EAAAG,aACHH,EAAAA,EAAAG,WAAAV,QAAA,eAAA,SADGY,EAAKC,QAAQN,GAGjBf,EAAMsB,KAAK,iBAAkBF,GAMrBpB,EAAMsB,KAAK,KAQnBtB,EAAMsB,KAAK,iBALItB,WACDsB,EAAKjB,KAAAL,EAAAsB,KAAX,kBAAAC,SACAvB,EAAWsB,KAAA,kBAAXV,OACHY,WAAAxB,EAAAsB,KAAA,kBAAAnB,EAAAN,QAHUG,EAAMsB,KAAK,kBAKftB,EAAAsB,KAAA,iBAEX,MALQtB,EAAMsB,KAAK,iBAAkB,SAUJE,WAARxB,EAAAsB,KAAA,kBAAAnB,EAAAN,QAlEnC,CAAA4B,OAAA,OAAAC,aAAA,OAHJ,CA0EMC","file":"counterup.min.js","sourcesContent":["\r\n(function( $ ){\r\n    \"use strict\";\r\n  \r\n    $.fn.counterUp = function( options ) {\r\n  \r\n      // Defaults\r\n      var settings = $.extend({\r\n          'time': 400,\r\n          'delay': 10\r\n      }, options);\r\n  \r\n      return this.each(function(){\r\n  \r\n          // Store the object\r\n          var $this = $(this);\r\n          var $settings = settings;\r\n  \r\n          var counterUpper = function() {\r\n              var nums = [];\r\n              var divisions = $settings.time / $settings.delay;\r\n              var num = $this.text();\r\n              var isComma = /[0-9]+,[0-9]+/.test(num);\r\n              num = num.replace(/,/g, '');\r\n              var isInt = /^[0-9]+$/.test(num);\r\n              var isFloat = /^[0-9]+\\.[0-9]+$/.test(num);\r\n              var decimalPlaces = isFloat ? (num.split('.')[1] || []).length : 0;\r\n  \r\n              // Generate list of incremental numbers to display\r\n              for (var i = divisions; i >= 1; i--) {\r\n  \r\n                  // Preserve as int if input was int\r\n                  var newNum = parseInt(num / divisions * i);\r\n  \r\n                  // Preserve float if input was float\r\n                  if (isFloat) {\r\n                      newNum = parseFloat(num / divisions * i).toFixed(decimalPlaces);\r\n                  }\r\n  \r\n                  // Preserve commas if input had commas\r\n                  if (isComma) {\r\n                      while (/(\\d+)(\\d{3})/.test(newNum.toString())) {\r\n                          newNum = newNum.toString().replace(/(\\d+)(\\d{3})/, '$1'+','+'$2');\r\n                      }\r\n                  }\r\n  \r\n                  nums.unshift(newNum);\r\n              }\r\n  \r\n              $this.data('counterup-nums', nums);\r\n              $this.text('0');\r\n  \r\n              // Updates the number until we're done\r\n              var f = function() {\r\n                  $this.text($this.data('counterup-nums').shift());\r\n                  if ($this.data('counterup-nums').length) {\r\n                      setTimeout($this.data('counterup-func'), $settings.delay);\r\n                  } else {\r\n                      delete $this.data('counterup-nums');\r\n                      $this.data('counterup-nums', null);\r\n                      $this.data('counterup-func', null);\r\n                  }\r\n              };\r\n              $this.data('counterup-func', f);\r\n  \r\n              // Start the count up\r\n              setTimeout($this.data('counterup-func'), $settings.delay);\r\n          };\r\n  \r\n          // Perform counts when the element gets into view\r\n          $this.waypoint(counterUpper, { offset: '100%', triggerOnce: true });\r\n      });\r\n  \r\n    };\r\n  \r\n  })( jQuery );"]}